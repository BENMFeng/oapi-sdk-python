# Code generated by Lark OpenAPI.

import io
from typing import *
from typing import IO
from lark_oapi.core.const import UTF_8, CONTENT_TYPE
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from lark_oapi.api.contact.v3.model.create_functional_role_request import CreateFunctionalRoleRequest
from lark_oapi.api.contact.v3.model.create_functional_role_response import CreateFunctionalRoleResponse
from lark_oapi.api.contact.v3.model.delete_functional_role_request import DeleteFunctionalRoleRequest
from lark_oapi.api.contact.v3.model.delete_functional_role_response import DeleteFunctionalRoleResponse
from lark_oapi.api.contact.v3.model.update_functional_role_request import UpdateFunctionalRoleRequest
from lark_oapi.api.contact.v3.model.update_functional_role_response import UpdateFunctionalRoleResponse


class FunctionalRole(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateFunctionalRoleRequest, option: RequestOption = RequestOption()) -> CreateFunctionalRoleResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: CreateFunctionalRoleResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateFunctionalRoleResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteFunctionalRoleRequest, option: RequestOption = RequestOption()) -> DeleteFunctionalRoleResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: DeleteFunctionalRoleResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteFunctionalRoleResponse)
        response.raw = resp

        return response

    def update(self, request: UpdateFunctionalRoleRequest, option: RequestOption = RequestOption()) -> UpdateFunctionalRoleResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: UpdateFunctionalRoleResponse = JSON.unmarshal(str(resp.content, UTF_8), UpdateFunctionalRoleResponse)
        response.raw = resp

        return response

    
