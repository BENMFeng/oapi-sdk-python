# Code generated by Lark OpenAPI.

import io
from typing import *
from typing import IO
from lark_oapi.core.const import UTF_8, CONTENT_TYPE
from lark_oapi.core import JSON
from lark_oapi.core.token import verify
from lark_oapi.core.http import Transport
from lark_oapi.core.model import Config, RequestOption, RawResponse
from lark_oapi.core.utils import Files
from requests_toolbelt import MultipartEncoder
from lark_oapi.api.calendar.v4.model.create_exchange_binding_request import CreateExchangeBindingRequest
from lark_oapi.api.calendar.v4.model.create_exchange_binding_response import CreateExchangeBindingResponse
from lark_oapi.api.calendar.v4.model.delete_exchange_binding_request import DeleteExchangeBindingRequest
from lark_oapi.api.calendar.v4.model.delete_exchange_binding_response import DeleteExchangeBindingResponse
from lark_oapi.api.calendar.v4.model.get_exchange_binding_request import GetExchangeBindingRequest
from lark_oapi.api.calendar.v4.model.get_exchange_binding_response import GetExchangeBindingResponse


class ExchangeBinding(object):
    def __init__(self, config: Config) -> None:
        self.config: Optional[Config] = config

    def create(self, request: CreateExchangeBindingRequest, option: RequestOption = RequestOption()) -> CreateExchangeBindingResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: CreateExchangeBindingResponse = JSON.unmarshal(str(resp.content, UTF_8), CreateExchangeBindingResponse)
        response.raw = resp

        return response

    def delete(self, request: DeleteExchangeBindingRequest, option: RequestOption = RequestOption()) -> DeleteExchangeBindingResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: DeleteExchangeBindingResponse = JSON.unmarshal(str(resp.content, UTF_8), DeleteExchangeBindingResponse)
        response.raw = resp

        return response

    def get(self, request: GetExchangeBindingRequest, option: RequestOption = RequestOption()) -> GetExchangeBindingResponse:
        # 鉴权、获取token
        verify(self.config, request, option)
        
        # 发起请求
        resp: RawResponse = Transport.execute(self.config, request, option)
        
        # 反序列化
        response: GetExchangeBindingResponse = JSON.unmarshal(str(resp.content, UTF_8), GetExchangeBindingResponse)
        response.raw = resp

        return response

    
